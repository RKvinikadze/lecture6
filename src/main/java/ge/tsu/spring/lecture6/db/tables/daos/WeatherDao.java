/*
 * This file is generated by jOOQ.
 */
package ge.tsu.spring.lecture6.db.tables.daos;


import ge.tsu.spring.lecture6.db.tables.Weather;
import ge.tsu.spring.lecture6.db.tables.records.WeatherRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeatherDao extends DAOImpl<WeatherRecord, ge.tsu.spring.lecture6.db.tables.pojos.Weather, Integer> {

    /**
     * Create a new WeatherDao without any configuration
     */
    public WeatherDao() {
        super(Weather.WEATHER, ge.tsu.spring.lecture6.db.tables.pojos.Weather.class);
    }

    /**
     * Create a new WeatherDao with an attached configuration
     */
    public WeatherDao(Configuration configuration) {
        super(Weather.WEATHER, ge.tsu.spring.lecture6.db.tables.pojos.Weather.class, configuration);
    }

    @Override
    public Integer getId(ge.tsu.spring.lecture6.db.tables.pojos.Weather object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Weather.WEATHER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchById(Integer... values) {
        return fetch(Weather.WEATHER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ge.tsu.spring.lecture6.db.tables.pojos.Weather fetchOneById(Integer value) {
        return fetchOne(Weather.WEATHER.ID, value);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Weather.WEATHER.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchByCountry(String... values) {
        return fetch(Weather.WEATHER.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Weather.WEATHER.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchByCity(String... values) {
        return fetch(Weather.WEATHER.CITY, values);
    }

    /**
     * Fetch records that have <code>temperature BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchRangeOfTemperature(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Weather.WEATHER.TEMPERATURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>temperature IN (values)</code>
     */
    public List<ge.tsu.spring.lecture6.db.tables.pojos.Weather> fetchByTemperature(Integer... values) {
        return fetch(Weather.WEATHER.TEMPERATURE, values);
    }
}
